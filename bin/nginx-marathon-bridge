#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: $name <apps_regex> <marathon host:port>+
        $name install_cronjob <apps_regex> <marathon host:port>+
 Generates a new configuration file for nginx from the specified Marathon
  servers, replaces the file in /usr/local/openresty/nginx/conf/conf.d/ and restarts the service.
  In the second form, installs the script itself, nginx and a cronjob that
  once a minute pings one of the Marathon servers specified and refreshes
  nginx if anything has changed. The list of Marathons to ping is stored,
  one per line, in:
    $cronjob_conf_file
  The script is installed as:
    $script_path
  The cronjob is installed as:
    $cronjob
  and run as root.

  Example: $name install_cronjob "^(play|node)$" localhost:8080
USAGE
}; function --help { -h ;}

name=nginx-marathon-bridge
cronjob_conf_file=/etc/"$name"/marathons
cronjob=/etc/cron.d/"$name"
script_path=/usr/local/bin/"$name"
conf_file=sites.conf

function main {
  config "$@"
}

function refresh_system_nginx {
  config "$@" > /tmp/"$conf_file"
  if ! diff -q /tmp/"$conf_file" /usr/local/openresty/nginx/conf/conf.d/sites/"$conf_file" >&2
  then
    msg "Found changes. Sending reload request to nginx..."
    cat /tmp/"$conf_file" > /usr/local/openresty/nginx/conf/conf.d/sites/"$conf_file"
    /etc/init.d/nginx reload
  fi
}

function install_cronjob {
  mkdir -p "$(dirname "$cronjob_conf_file")"
  mkdir -p /usr/local/openresty/nginx/conf/conf.d/sites
  [[ -f $cronjob_conf_file ]] || touch "$cronjob_conf_file"
  if [[ $# -gt 0 ]]
  then printf '%s\n' "$@" | dd of="$cronjob_conf_file"
  fi
  cat "$0" | dd of="$script_path"
  chmod ug+rx "$script_path"
  cronjob     | dd of="$cronjob"
  config "$@" | dd of=/usr/local/openresty/nginx/conf/conf.d/sites/"$conf_file"
}

function cronjob {
cat <<EOF
* * * * * root $script_path logged refresh_system_nginx \$(cat $cronjob_conf_file)
EOF
}

function config {
  header
  apps "$@"
}

# may add a header if we wish
function header {
cat <<\EOF
EOF
}

function apps {
  apps_regex=${1%}
  shift # all except first argument
  matched_apps=$(curl -sSfLk -m 10 -H 'Accept: text/plain' "${1%/}"/v2/tasks | awk -v x=$apps_regex '{if (match($1, x)) print $0}')
  (until curl -sSfLk -m 10 -H 'Accept: text/plain' "${1%/}"/v2/tasks | awk -v r=$apps_regex '{if (match($1, r)) print $0}'; do [ $# -lt 2 ] && return 1 || shift; done) | while read -r txt
  do
    set -- $txt
    if [ $# -lt 2 ]; then
      shift $#
      continue
    fi

    local app_name="$1"
    local app_port="$2"
    shift 2

    if [ ! -z "${app_port##*[!0-9]*}" ]
    then
      cat <<EOF
upstream $app_name {
EOF
      while [[ $# -ne 0 ]]
      do
        out "    server $1;"
        shift
      done
    fi
      cat <<EOF
}
EOF
  done
}

function logged {
  exec 1> >(logger -p user.info -t "$name[$$]")
  exec 2> >(logger -p user.notice -t "$name[$$]")
  "$@"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

# If less than 1 argument is provided, print usage and exit. At least one
# argument is required as described in the `USAGE` message.
[ $# -lt 1 ] && { -h; exit 1; }

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi
